// Test definitions. Do NOT edit this file!

#include <tuple>

//#define CATCH_CONFIG_MAIN // defines main() automatically
#include "lib/catch.hpp"
#include "sort.hpp"

element* stations;
element* tmpStations;
int size;

int setup(int* size) {
    stations = (element*)malloc(sizeof(element)*6000);
    tmpStations = (element*)malloc(sizeof(element)*6000);
    FILE * fp;
    char line[100]; // keeps one line of the file

    // try to open the file; in case of an error exit the program
    *size = 0;
    fp = fopen("stations.csv", "r");
    if (!fp) {
        printf("Cannot open file stations.csv!\n");
        return 1;
    }
    
    // read all weather stations from file and add them to the
    // hash table
    while (!feof(fp)) {
        // read one line and skip empty and comment lines
        fgets(line, 100, fp);
        if (line[0] == '#') continue;
        if (isspace(line[0])) continue;
        
        line[strcspn(line, "\r\n")] = 0;
        // take the first 4 characters as key value
        strncpy(stations[*size].icao_code, line, 4);
        stations[*size].icao_code[4] = '\0';
        
        // take the rest as value
        strcpy(stations[*size].station_name, strchr(line, ';')+1);
        *size += 1;
    }
    
    // close the file
    fclose(fp);
    
    return 0;
}

void teardown(){
    free(stations);
    free(tmpStations);
}

// =====================
// Sorting Testcases
// ---------------------

TEST_CASE("Test1", "selectionSort")
{
    setup(&size);
    selection_sort(stations, size);
    for (int i = 0; i < size - 1; i++)
    {
        INFO("Test Case for SelectionSort: some elements are not sorted correctly.");
        REQUIRE(strcmp(stations[i].station_name, stations[i + 1].station_name) <= 0);
    }
    teardown();
}


TEST_CASE("Test2", "mergeSort")
{
    setup(&size);
    merge_sort(stations, tmpStations, 0, size-1);
    for (int i = 0; i < size - 1; i++)
    {
        INFO("Test Case for MergeSort: some elements are not sorted correctly.");
        REQUIRE(strcmp(stations[i].station_name, stations[i + 1].station_name) >= 0);
        
    }
    teardown();
}

TEST_CASE("Test3", "selectionSortFP")
{
    setup(&size);
    selection_sort_fp(stations, size, compareByIcaoCode);
    for (int i = 0; i < size - 1; i++)
    {
        INFO("Test Case for SelectionSortFP: some elements are not sorted correctly.");
        REQUIRE(strcmp(stations[i].icao_code, stations[i + 1].icao_code) <= 0);
        
    }
    teardown();
}
